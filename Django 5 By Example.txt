
https://github.com/PacktPublishing/Django-5-by-Example


Chapter01
Building a Blog Application

telling Django to run on a custom port and use a specific settings.py file
$ python manage.py runserver 127.0.0.1:8001 --settings=mysite.settings

In Django 5, can define default values for model fields using database-computed default values
from django.db.models.functions import Now

to get the user settings
from django.conf import settings

the migrate command applies migrations for all applications listed in INSTALLED_APPS

displaying your model in the admin.py

from django.contrib import admin
from .models import Post
@admin.register(Post)
class PostAdmin(admin.ModelAdmin):
    list_display = ['title', 'slug', 'author', 'publish', 'status']
    list_filter = ['status', 'created', 'publish', 'author']
    search_fields = ['title', 'body']
    prepopulated_fields = {'slug': ('title',)}
    raw_id_fields = ['author']
    date_hierarchy = 'publish'
    ordering = ['status', 'publish']

Creating objects
my_model_instance = MyModel(attribute=value)
my_model_instance.save()

OR

my_model_instance = MyModel.objects.create(attribute=value)


quick overview of templates
template tags: {% tag %} control the rendering of your template
template variables: {{ variable }} get replaced with values when the template is rendered
template filters: {{ variable|filter }} allow you to modify variables for display



Chapter02
Enhancing Your Blog and Adding Social Features

Setps through a cookbook approach to create different pages

Class-based views

Creating forms with Django
uses the forms framework to create forms quickly
1.) Form: build standard forms by defining fields and validations
2.) ModelForm: build forms tied to model instances

Form requires a form.py file

Sending emails

following settings allow you to define the SMTP configuration to send emails with Django:
    EMAIL_HOST: The SMTP server host; the default is localhost
    EMAIL_PORT: The SMTP port; the default is 25
    EMAIL_HOST_USER: The username for the SMTP server
    EMAIL_HOST_PASSWORD: The password for the SMTP server
    EMAIL_USE_TLS: Whether to use a Transport Layer Security (TLS) secure connection
    EMAIL_USE_SSL: Whether to use an implicit TLS secure connection

Working with environment variables
uses the python-decouple library
name the file .env

Professional email service
SendGrid
Amazon Simple Email Service (SES)

can use the django-anymail package

passing around URLs and data

in detail.html
{% url 'app_name:view_name' model_name.id %}

in views.py
def view_name(request, my_id):
    return render (request, 'app_name/model_name/share.html', {'model_object': model_name })

the {% with %} template tag is useful for avoiding hitting the database or accessing  expensive methods multiple times.



Chapter03
Extending Your Blog Application

catergorizing posts using tags
use django-taggit
$ pip install django-taggit

Creating custom template tags and filters
https://docs.djangoproject.com/en/5.0/howto/custom-template-tags/.
Django provides helper functions to create template tags
1.) simple_tag: processes the given data and returns a string
2.) inclusion_tag: processes the given data and returns a rendered template

@register.simple_tag

Custom template filters
https://docs.djangoproject.com/en/5.0/howto/custom-template-tags/#writing-custom-template-filters.

Adding a sitemap to the site
an XML file that tells search engines the pages of your website, their relevance and how frequently they are updated
depends on:
django.contrib.sites
django.contrib.sitemaps

sitemaps.py

to access your sitemap
http://localhost:8000/sitemap.xml

https://docs.djangoproject.com/en/5.0/ref/contrib/sites/

Change the domain to be used with your sitemap
http://localhost:8000/admin/sites/site/

Creating feeds
feeds.py

to view your feed in Chrome
http://localhost:8000/blog/feed/

For full text-search will use PostgreSQL

One thing of note, the directions were incorrect for such a new book

use Docker
$ docker pull postgres:16.2
$ docker run --name=blog_db -e POSRGRES_DB=blog -e POSTGRES_USER=blog -e POSTGRES_PASSWORD=blog -p 5432:5432 -d postgres:16.2

install psycopg PostgreSQL adapter for Python
$ pip install psycopg2-binary
$ pip install psycopg==3.1.18

need to dump data
// this errored
$ python manage.py dumpdata --indent=2 --output=mysite_data.json

$ python manage.py dumpdata --natural-foreign --natural-primary -e contenttypes -e auth.Permission --indent 2 > dump.json

edit the .env file
DB_NAME=blog_db
DB_USER=blog
DB_PASSWORD=blog
DB_HOST=localhost

configure the database settings in settings.py
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': config('DB_NAME'),
        'USER': config('DB_USER'),
        'PASSWORD': config('DB_PASSWORD'),
        'HOST': config('DB_HOST'),
    }
}

make sure you run $ python manage.py runserver

now load the previosuly dumped data
$ python manage.py loaddate mysite_data.json

the dumping and loading seemed to cause a problem
need to change the 'pk' of contenttypes.contenttype to 'id'
https://stackoverflow.com/questions/40193992/django-loaddata-unique-constraint-failed

to use PostgresSQL full search abilities
django.contrib.postgres



Chapter04
Building a Social Website

AuthenticationMiddleware: Associates users with requests using sessions
SessionMiddleware: Handles the current session across requests

Creating a login view
from django import forms

class LoginForm(forms.Form):
    username = forms.CharField()
    password = forms.CharField(widget=forms.PasswordInput)
    # PasswordInput widget is used to render the password HTML element

Django Built-in authentication view
django.contrib.auth.views

LoginView: Handles a login form and logs in a user
LogoutView: Logs out a user

Django provides the following views to handle password changes:
PasswordChangeView: Handles a form to change the user’s password
PasswordChangeDoneView: The success view that the user is redirected to after a successful password change

Django also includes the following views to allow users to reset their password:
PasswordResetView: Allows users to reset their password. It generates a one-time-use link  with a token and sends it to a user’s email account
PasswordResetDoneView: Tells users that an email—including a link to reset their password—has been sent to them
PasswordResetConfirmView: Allows users to set a new password
PasswordResetCompleteView: The success view that the user is redirected to after successfully resetting their password

from django.contrib.auth import views as auth_views

Django Authentication views expect the following location
./app_name/templates/registration

login template can use the default Django AuthenticationForm form located at django.contrib.auth.forms

so basically can use the default view provided by Django and then write the custom HTML code

./app_name/urls.py

from django.contrib.auth import views as auth_views
from django.urls import path
from . import views
urlpatterns = [
    # this is the key
    path('login/', auth_views.LoginView.as_view(), name='login'),
    path('logout/', auth_views.LogoutView.as_view(), name='logout'),
]

./app_name/templates/registration
logged_out.html
login.html

in our form HTML element we add <input type="hidden" name="next" value="{{ next }}" />
so after loging in we go to http://127.0.0.1:8000/account/login/?next=/account/
















test
W~=:r9*MtL:is^Y


LEFT OFF PAGE 215
























Apps
Blog: CHs 1 to 3 -> 1,2,3 [DONE]
Image bookmarking website: CHs 4 to 7 -> 4,5,6,7
Online Shop: CHs 8 to 11 -> 8,9,10,11
e-Learning Platform: CHs 12 to 17 -> 12,13,14,15,16,17

Where a chapter begins
CH04    198
CH05    244
CH06    270
CH07    318
CH08    372
CH09    430
CH10    488
CH11    526
CH12    570
CH13    600
CH14    640
CH15    678
CH16    712
CH17    754
END     802




















































 
